/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.mitumc.mnemonicexj;

import java.security.SecureRandom;
import java.util.HashMap;

import org.mitumc.sdk.key.Keypair;
import org.web3j.crypto.MnemonicUtils;

public class App {

    public static HashMap<String, Object> generateMitumKeypairWithoutSeed() {

        try {
            /* generate random entropy */
            SecureRandom random = new SecureRandom();
            byte[] entropy = new byte[32];
            random.nextBytes(entropy);

            /* generate mnemonic from entropy */
            String mnemonic = MnemonicUtils.generateMnemonic(entropy);

            /* generate seed from mnemonic */
            byte[] _seed = MnemonicUtils.generateSeed(mnemonic, "your salt phrase");

            /* seed used by mitum */
            byte[] seed = new byte[32];
            System.arraycopy(_seed, 0, seed, 0, 32);

            /* generate mitum keypair with seed */
            Keypair kp = Keypair.fromSeed(seed);

            HashMap<String, Object> map = new HashMap<>();
            map.put("mnemonic", mnemonic);
            map.put("keypair", kp);

            return map;
        } catch (Exception exception) {
            System.out.println("Cannot generate keypair");
            System.exit(-1);
        }

        return null;
    }

    public static HashMap<String, Object> generateMitumKeypairFromEtherKey(String key) {
            /* ether key to entropy */
            byte[] entropy = new java.math.BigInteger(key, 16).toByteArray();
    
            /* generate mnemonic from entropy */
            String mnemonic = MnemonicUtils.generateMnemonic(entropy);
    
            /* generate seed from mnemonic */
            byte[] _seed = MnemonicUtils.generateSeed(mnemonic, "your salt phrase");
    
            /* seed used by mitum */
            byte[] seed = new byte[32];
            System.arraycopy(_seed, 0, seed, 0, 32);
    
            /* generate mitum keypair with seed */
            Keypair kp = Keypair.fromSeed(seed);

            HashMap<String, Object> map = new HashMap<>();
            map.put("mnemonic", mnemonic);
            map.put("keypair", kp);

            return map;
    }

    public static void main(String[] args) {

        String sampleKey = "1db2e1a7e63a1b99f38d3ba36625c5ee8c4abd24f86d947e6cb373fc8c18adf2";
    
        HashMap<String, Object> withoutSeed = generateMitumKeypairWithoutSeed();
        HashMap<String, Object> withSeed = generateMitumKeypairFromEtherKey(sampleKey);

        System.out.println("------------------without seed------------------");
        System.out.println("mnemonic: " + withoutSeed.get("mnemonic"));
        System.out.println("private key: " + ((Keypair)withoutSeed.get("keypair")).getPrivateKey());
        System.out.println("public key: " + ((Keypair)withoutSeed.get("keypair")).getPublicKey());
        System.out.println();
        System.out.println("------------------with ether key------------------");
        System.out.println("mnemonic: " + withSeed.get("mnemonic"));
        System.out.println("private key: " + ((Keypair)withSeed.get("keypair")).getPrivateKey());
        System.out.println("public key: " + ((Keypair)withSeed.get("keypair")).getPublicKey());
    }
}
